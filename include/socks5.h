#ifndef _INCLUDE_PROT_SOCKS5_H_
#define _INCLUDE_PROT_SOCKS5_H_

#include <stdint.h>
#include <event2/bufferevent.h>

#define ONION_ADDRESS_LENGTH 62 // 56 + 1 (dot) + 5 (onion ext)

// Some definitions important for SOCKS5 protocol
// more information in RFC 1928
#define SOCKS5_VERSION        0x05
#define SOCKS5_AUTH_METHOD    0x00
#define SOCKS5_CONNECT_CMD    0x01
#define SOCKS5_ADDRESS_IPv4   0x01
#define SOCKS5_ADDRESS_IPv6   0x04
#define SOCKS5_ADDRESS_DOMAIN 0x03

// Max len of message returned by socks5_error_string
#define SOCKS5_ERROR_MAX_LEN  127

// Errors that can occur while attempting to connect
enum socks5_errors {
    // Success
    SOCKS5_ERROR_NO_ERROR,

    // Errors returned by SOCKS server defined in RFC 1928
    SOCKS5_ERROR_SERVER_FAIL,
    SOCKS5_ERROR_CONN_NOT_ALLOWED,
    SOCKS5_ERROR_NETWORK_UNAVAIL,
    SOCKS5_ERROR_HOST_UNAVAIL,
    SOCKS5_ERROR_CONN_REFUSED,
    SOCKS5_ERROR_TTL_EXPIRED,
    SOCKS5_ERROR_CMD_UNSUPORTED,
    SOCKS5_ERROR_ADDRESS_TYPE_INVALID,

    // Errors generated by this client
    SOCKS5_ERROR_UNKNOWN,       // Something is wrong with server responses
    SOCKS5_ERROR_CONN_CLOSE,    // Failed to connect or server closed connection
    SOCKS5_ERROR_AUTH_FAILED,   // Failed to authenticate with the server
    SOCKS5_ERROR_CONN_TIMEOUT   // Bufferevent timed out (If timeout is set)
};

// Connection steps
enum socks5_step {
    SOCKS5_STEP_AUTH,     // Authenticate with SOCKS5_AUTH_METHOD auth method
    SOCKS5_STEP_CONNECT   // Request connection to onion service
};

// Type of function that gets executed when connecting has finished
typedef void (*socks5_done_cb)(struct bufferevent *buffev, enum socks5_errors err, void *attr);

// Internal data structure used by connect and callback functions
// to pass data to each other
struct socks5_data {
    void *attr;                  // Attribute given to done callback function
    struct bufferevent *buffev;  // Bufferevent where connection is happening

    enum socks5_step step;       // Current step in connection process
    socks5_done_cb done_cb;      // Callback to call when done (or when failed)

    uint16_t port;                                // Port to connect to
    uint8_t onion_address[ONION_ADDRESS_LENGTH];  // Onion address to connect to
};

// Connect to tor client with given onion address using socks protocol
// version 5
void socks5_connect_onion(
    struct bufferevent *buffev,
    const uint8_t *onion_address,
    uint16_t port,
    socks5_done_cb done_cb,
    void *attr
);

// Convert socks error code to human readable error
const char * socks5_error_string(enum socks5_errors err_code);

#endif